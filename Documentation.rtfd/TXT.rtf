{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf100
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Monaco;
\f3\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red170\green13\blue145;
\red0\green0\blue0;\red230\green230\blue230;\red0\green0\blue0;\red38\green38\blue38;\red14\green115\blue192;
}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c0;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c66500\c5200\c56900;
\cssrgb\c0\c0\c0;\csgray\c92143;\csgray\c0\c0;\cssrgb\c20000\c20000\c20000;\cssrgb\c0\c53333\c80000;
}
\margl1440\margr1440\vieww15300\viewh16580\viewkind1
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc\partightenfactor0

\f0\b\fs28 \cf0 \ul \ulc0 \
Contents of this File\
\
\ulnone \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 \
\'95 Connecting to Server\
\
\'95 Server Workflow\
	\'95 Updating Node.js Packages\
	\'95 Development Machines\
\
\'95 JWT\
\
\'95 Server Details\
\
\'95 Password Policies\
\
\'95 Database Model\
\
\'95 Messenger API\
\
\'95 Git Tips\
\
\'95 Swift Development Tips\
\
\'95 TLS/SSL
\b0 \

\b \
\'95 Websockets\
\
\'95 Nginx\
	\'95 Reverse Proxy Setup\
	\'95 Changing Config File\
	\'95 Logging Access\
\
\'95 Encrypting with Apple Libraries\
	\'95 Encrypting\
\
\'95 Security Layers\
\
\
\
\
\
\
\

\fs32 Connecting to Server
\b0\fs24 \
\
The server (AWS EC2 instance) has the key pairs of both development machines. Connecting to the server requires the usage of the following command in a terminal:\
\
	ssh ubuntu@ec2-13-58-143-176.us-east-2.compute.amazonaws.com\
\
This is the default SSH connection method as specified by AWS.
\b \
\

\fs32 Server Workflow
\b0\fs24 \
\
Changes to the server are committed to the 
\i origin
\i0  remote branch located on GitHub.com. When the commit is to the master branch from either development computers, git hooks simultaneously push to the 
\i production
\i0  remote located on the AWS server using:\
\
	git push production master\
\
A tutorial of this setup is explained in the section 
\b Git Tips
\b0 . The EC2 instance has the key pairs of both development machines. Once the server receives the commit, node.js restarts the server process running from the server.js file using the following command:\
\
	sudo pm2 restart server\
\
This functionality can also be created by starting server.js using the 
\i nodemon
\i0  utility. At this point, if any 502 responses come back from the server, there was an error in the committed code. Developer should at that point connect to the server (described in the section 
\b Connecting to Server
\b0 ) and use the following command:\
\
	sudo pm2 list\
\
This will display the currently running node apps. There should be an running by the name of 
\i server
\i0 . If an error has occurred it will show "errored" in the status column. Use the following command to find the error:\
\
	sudo pm2 logs server --lines 100\
\
The lines argument can be decreased, increased, or omitted. \
\

\i 	
\i0\b\fs32 Updating Node.js Packages
\fs24 \
\
	
\b0 Inside the ~/messengerAPI/package.json file are the server application's 	 	dependencies. See this file for formatting. When adding a new dependency (or in 	the case if a necessary update) call the following command:\
\
		sudo npm install\
\
	
\b\fs32 Development Machines
\b0\fs24 \
\
	To start developing on a local machine, the server.js file from the server 		repository must be started. Ensure the same packages are installed as matches 	the server by following the instructions in 
\b Updating Node.js Packages
\b0 . The 	instructions in 
\b Server Workflow
\b0  can be followed on the development machine 	but first use the following command to start the MongoDB database:\
\
		mongod\
\
	This will attach itself to a terminal and can be stopped using Ctl+C. After this, 	start the node server application by changing the terminal's focus directory to the 	location of the server.js file and then call:\
 \
		sudo pm2 start server.js\
\
	The location of server.js is located in the server git repository. To test API calls, 	instead of using https://hm478project.me/[API CALL]/, you would use http://	localhost:8080/[API CALL]/.\
	\

\b\fs32 JWT
\b0\fs24 \
\
The secret used in JWT signing is generated when 
\i server.js
\i0  is started and stored in key.json. The JWT header contains the username of its owner. The expiration date for the token is set for 24 hours from creation. A token is given to a user after clearing 
\i login2
\i0 . Before using a websocket, our server had middleware code to prevent access to certain API's that required a valid JWT to access. Now the JWT is checked in the open websocket stream.\
\

\b\fs32 Server Details
\b0\fs24 \
\
\'95 AWS EC2 Instance\
	- Hosts our server.\
\'95 Express\
	- Listen to traffic on ports and handle it.\
\'95 MongoDB\
	- The database.\
\'95 Mongoose\
	- Interacting with MongoDB.\
\'95 Node.js\
	- JavaScript for web deployment.\
\'95 Ubuntu 14\
	- Operating system of our server.\
\'95 PM2\
	- Process manager for node.js. Otherwise node processes are in the list of \
	linux processes running. Pm2 better handles starting/restarting/organizing\
	node processes.\
\'95 NPM\
	- Package manager for node.js.\
\'95 Socket.io\
	- Websocket framework.\
\'95 socketio-jwt\
	- JWT validation for socket.io.\
\
API directory location in the ubuntu user directory:\
	\
	~/messengerAPI/\
\

\b\fs32 Password Policies 
\b0\fs24 \
\
\'95 Minimum length is 8.\
\'95 
\i (To Implement) 
\i0 At least 1 number.\
\'95 
\i (To Implement) 
\i0 At least 1 capital letter.\
\

\b\fs32 Database Model
\b0\fs24 \
\
	
\b User
\b0 \
		
\i name
\i0 : String\
			User-specified. Unique to every user.\
		
\i password
\i0 : String\
			User-specified password concatenated with salt \
			after hashing using HMAC SHA-256.\
			Checked at time of register for password policies.\
		
\i challenge
\i0 : String\
			Generated when user initiates login1 for remote login.\
		
\i salt
\i0 : Number\
			16 byte CSPRNG number generated for each user at\
			time of account registration.\
\

\b\fs32 Messenger API
\fs24 \

\b0 \
	
\b\fs32 Non-socket calls:
\b0\fs24 \
	/login1/\
		POST\
			Keys\
				
\i name\
		Returns
\i0  - Salt and Challenge if user exists.
\i \

\i0 	/login2/\
		POST\
			Keys\
				
\i name\
				tag\
		Returns
\i0  - JWT if correct tag was produced.\
	/register/\
		POST\
			Keys\
				
\i name\
				password
\i0 \
	/users/		\
		GET\
			
\i Returns
\i0  - All users in database.\
				
\i _id: String
\i0 \
				
\i name: String\
				password: String\
			
\i0 !!! Used for development. Remove for production.
\i \
	/users/\
		
\i0 DELETE\
			Removes all users.\
			!!! Used for development. Remove for production.\
\
	
\b\fs32 Websocket calls:
\fs24 \

\b0 	- To access the websocket, a valid JWT must be obtained from the login route.\
	/messages/\
		WEBSOCKET\
			Immediately after connection, an 'authenticate' message must be 			emitted to the websocket before any other message gets sent in 			order to continue in the protocol. See the following section for the\
			various protocols in the client:client and client:server interactions.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
	
\b\fs32 Messenger Protocol
\fs24 \

\b0 \
	{{\NeXTGraphic MessengerProtocol small.png \width6020 \height4260 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\

\b\fs32 Git Tips
\b0\fs24 \
\
To setup an ssh-connected server repository, you first want to create your git repository. Follow these steps: \
	1. SSH to your server. For this tutorial, it is required that the SSH protocol logins 	solely by key validation and not password. See 
\b Setup Server SSH
\b0  if more 	information is needed.\
	2. Create or change to directory where repository files will be dumped.\
		> mkdir /myServerProject/\
		> cd /myServerProject/\
	3. Assuming git is installed, use the following command:\
		> git init --bare\
		* A bare git repository doesn't collapse all git files into a hidden directory 		named '.git, instead it dumps all git helper files the repo directory.\
	4. Now on the machine that will make commits and be pushing to this server,\
	in a terminal, change directory to your local machine repository.\
		> cd /repositories/myServerProject/\
	5. Call the following command to make a new remote:\
		> git remote add myProductionRemote user@0.0.0.0:/myServerProject/\
	6. For this tutorial, the goal is to have the remote server have its filed updated\
	whenever the GitHub origin remote is committed to. Navigate to this directory:\
\
		/repositories/myServerProject/.git/hooks/\
\
	Create a file named 'post-commit', or if it exists, open it with a text editor. If you\
	had to create this file, it is necessary to give it executable permissions. Edit this\
	file and at the end of its contents add a new line:\
		\
		git push myProductionRemote master\
\

\b\fs32 Swift Development Tip
\b0\fs24 \
\
\'95 External libraries for our MacOSX Swift client were installed and integrated using the pods system. This requires a file named '
\i Podfile
\i0 ' to be created in the directory of your applications main repository. Once you've created (or whenever updating) your podfile, call the command in a terminal on the directory of your 
\i Podfile
\i0 :\
\
	pod install\
\
Note: It may be necessary to append ' --repo-update' to the end of the previous terminal command if any pods are out of date. \
If you are using an Xcode project with libraries installed by the pod system, you can no longer use the .
\i xcodeproj
\i0  file to open your project in Xcode. The file to be used is in the same directory as the 
\i Podfile
\i0  and has the .
\i xcworkspace
\i0  extension.\
When opening the .
\i xcworkspace
\i0  file, you should see your project and another project named 'Pods' open in same development window. If you expand the Pods project and look in the Pods directory, there should be a list of \
\
\'95 Disable secure connection checks for URL sessions by adding to a project's Info.plist when developing locally. Note: Open the Info.plist file as source code instead of pro\
\
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f1 \cf2 \cb3     	\cf4 <key>\cf2 NSAppTransportSecurity\cf4 </key>
\f0 \cf0 \

\f1 \cf2     	\cf4 <dict>
\f0 \cf0 \

\f1 \cf2         	\cf4 <key>\cf2 NSAllowsArbitraryLoads\cf4 </key>
\f0 \cf0 \

\f1 \cf2         	\cf4 <true/>
\f0 \cf0 \

\f1 \cf2         	\cf4 <key>\cf2 NSExceptionDomains\cf4 </key>
\f0 \cf0 \

\f1 \cf2         	\cf4 <dict>
\f0 \cf0 \

\f1 \cf2             	\cf4 <key>\cf2 example.com\cf4 </key>
\f0 \cf0 \

\f1 \cf2             	\cf4 <dict>
\f0 \cf0 \

\f1 \cf2                 	\cf4 <key>\cf2 NSExceptionAllowsInsecureHTTPLoads\cf4 </key>
\f0 \cf0 \

\f1 \cf2                 	\cf4 <true/>
\f0 \cf0 \

\f1 \cf2                 	\cf4 <key>\cf2 NSIncludesSubdomains\cf4 </key>
\f0 \cf0 \

\f1 \cf2                 	\cf4 <true/>
\f0 \cf0 \

\f1 \cf2             	\cf4 </dict>
\f0 \cf0 \

\f1 \cf2        	\cf4 </dict>
\f0 \cf0 \

\f1 \cf2     	\cf4 </dict>\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs32 \cf0 \cb1 TLS/SSL
\b0\fs24 \
\
The server uses LetsEncrypt to provide validate SSL certificates. Since our server has Nginx serving as a reverse proxy (see 
\b Reverse Proxy Setup
\b0 ) for our NodeJs server application, it's Nginx that handles SSL and not NodeJs. Nginx interacts with LetsEncrypt's certs to ensure up to TLS1.2 protocol for a secure HTTPS connection. It also handles redirects from HTTP to HTTPS to force all calls to go through TLS. This seems to have negligible overhead for our small-scale system. We decided to handle SSL through Nginx and not NodeJs for better organization and less code in our Node app.\
\

\b\fs32 Websockets
\b0\fs24 \
\
Our MacOSX Swift client uses the library 
\i Starscream
\i0  for socket connections and our NodeJs server uses its own Net library for socket connections.\
\
The socket stream itself must be validated independently of the web application. So we are using 
\i socketio-jwt
\i0  to do that. See this for reference:\
\
	https://auth0.com/blog/auth-with-socket-io/\
\

\b\fs32 Nginx
\b0\fs24 \
\
Nginx directs all '/messages' traffic to the node server since node listens on port 8080 and 10001. Port 10001 is for websocket connections. Note that the nginx default webpage is located at:\
\
	/var/www/html/default/index.nginx-debian.html\
\
	
\b\fs32 Reverse Proxy Setup
\b0\fs24 \
\
	Nginx receives all traffic but we want to write our logic in Node, so we direct 	specific traffic to the node process running through PM2 on the server. In our 	case, our node server is open on port 8080 (and others), so we redirect 	traffic 	to the localhost ip and the port open for our node process. In the example below, 	all traffic gets directed to the node process, but specific routes can be specified 	as a location\
		\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf5 \cb6 		server \{	\

\f2\fs20 \CocoaLigature0 			# Directs traffic at '/' route to a local ip/port.\
			location / \{\
				proxy_pass http://127.0.0.1:8080;\
				proxy_http_version 1.1;\
				proxy_set_header Upgrade $http_upgrade;\
				proxy_set_header Connection 'upgrade';\
				proxy_set_header Host $host;\
				proxy_cache_bypass $http_upgrade;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf5 				\}\
\
				. . .
\f0\fs24 \CocoaLigature1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf5 		\}\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \cb1 \
	
\b\fs32 Changing Config File
\b0\fs24 \
\
	The Nginx configuration file has the file location on Ubuntu 14:\
\
		/etc/nginx/sites-available/default\
\
	After making changes to this file, you can error check it before restarting nginx 	with the following command:\
\
		sudo nginx -c /etc/nginx/nginx.conf -t\
\
	After correcting errors, restart nginx for the changes to take affect with the 		following command: \
\
		sudo service nginx restart\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf5 \cb7 	
\b\fs32 Logging Access
\b0\fs24 \
\
	Our Nginx is setup with a custom logging format and location using the following 	setup:\
\CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf5 \cb6 		log_format compression '$remote_addr - $remote_user [$time_local] '\
                           '"$request" $status $body_bytes_sent '\
                           '"$http_referer" "$http_user_agent" '					    '"$gzip_ratio"';\
\
\
		server \{\
\
        			gzip on;\
        			access_log /var/log/nginx/nginx-access.log compression;\
\
			. . .\
		\}\
\cb7 \
	This will put connection logs into the following file location:\
\
		/var/log/nginx/nginx-acces.log\
\
\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b\fs32 \cf0 \cb1 \CocoaLigature1 Encrypting with Apple Libraries\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b0\fs24 \cf5 \cb7 \CocoaLigature0 \
	
\b\fs32 Encrypting\

\b0\fs24 \
	Apple's Security library is a robust API for performing various security operations. 	Encrypting information happens through the following call:\
\
		SecKeyCreateEncryptedData(_:_:_:_:)\
\
	If the algorithm specified is AES, for example, you would still provide a private 	RSA key but the library would: generate an AES key, encrypt the data with the 	AES key, then encrypt the AES key with the RSA key and package this together 	as data that can be sent over a network.\
\
	From Apple Security framework documentation:\
\
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf8 \cb6 \expnd0\expndtw0\kerning0
\CocoaLigature1 	On the encryption side, instead of simply padding and encoding the 		given block of data with the key, the 							{\field{\*\fldinst{HYPERLINK "apple-reference-documentation://hsXmIuv5gn"}}{\fldrslt 
\f0 \cf9 SecKeyCreateEncryptedData(_:_:_:_:)}} function first generates a 		random Advanced Encryption Standard (AES) session key. It uses 		this key to encrypt the input data, and then RSA encrypts the AES 		key using the input public key you provide. It finally assembles the 		RSA encrypted session key, the AES encrypted data, and a 16-byte 		AES-GCM tag into a block of data that it returns to you.\

\f0\fs24 \cf5 \cb7 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b\fs32 \cf5 Security Layers\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b0\fs24 \cf5 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b\fs32 \cf5 	SSL\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b0\fs24 \cf5 \
	All connections to the server are directed through the HTTPS protocol. Our SSL 	certificate is distributed through LetsEncrypt and generated through 		LetsEncrypt's CertBot. 
\i SSLLabs.com
\i0  gives our server the following grade...\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc\partightenfactor0
\cf0 \cb1 \CocoaLigature1 {{\NeXTGraphic SSLGrade_small@2x.jpg \width9000 \height6350 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
	
\b\fs32 Registration
\b0\fs24 \
	\
	When a new user registers with a unique username, the password is stored in an 	unrecoverable hash form (SHA256). The password is salted with 128 bits of 	CSPRNG integers. \
	\
	
\b\fs32 Login
\b0\fs24 \
\
	After registration, user passwords are never sent to the client. The server uses a 	double login api route (
\i login1
\i0  and 
\i login2
\i0 ) in which a challenge is generated and 	HMAC's generated from the client and server are compared to ensure the 		password entered on the client matches the hash on the server. If this remote 	login protocol is successful, the server returns a JWT to the client.\
	
\b\fs32 JWT
\b0\fs24 \
\
	Since chat operations happen over a websocket, it's necessary to ensure the 	security of the open socket stream. When a websocket is opened from a client to 	the server, the first message sent to the server must be a valid JWT. This 		prevents the stream from getting highjacked as any new connections must 	provide a valid JWT.\
\
	
\b\fs32 End-to-End Encryption
\b0\fs24 \
\
	To guarantee that the server cannot read user chat messages, 2048-bit RSA 	keys are exchanged between the two individuals in a chat. Both public keys are 	exchanged after JWT websocket stream validation. These keys are used by the 	Apple Security libraries to encrypt user messages before they are sent to the 	server. The encryption process involves taking plaintext and performing a GCM 	mode AES encryption. The symmetric key generated for this encryption is then 	itself encrypted by the 2048-bit RSA public key with PKCS7 padded OAEP-RSA 	and then packaged with the cipher text. See the section 
\b Encrypting with Apple 	Libraries
\b0  above for more information. Messages are not archived and only pass 	through server memory. Since the server uses websockets and not polling, it isn't 	necessary to store messages in a database.}