{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf100
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww14400\viewh16280\viewkind1
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 Connecting to Server
\b0 \
\
The server (AWS EC2 instance) has the key pairs of both development machines. Connecting to the server requires the usage of the following command in a terminal:\
\
	ssh ubuntu@ec2-13-58-143-176.us-east-2.compute.amazonaws.com\
\
This is the default SSH connection method as specified by AWS.
\b \
\
Server Workflow
\b0 \
\
Changes to the server are committed to the 
\i origin
\i0  remote branch located on GitHub.com. When the commit is to the master branch from either development computers, git hooks simultaneously push to the 
\i production
\i0  remote located on the AWS server using:\
\
	git push production master\
\
A tutorial of this setup is explained in the section 
\b Git Tips
\b0 . The EC2 instance has the key pairs of both development machines. Once the server receives the commit, node.js restarts the server process running from the server.js file using the following command:\
\
	sudo pm2 restart server\
\
This functionality can also be created by starting server.js using the 
\i nodemon
\i0  utility. At this point, if any 502 responses come back from the server, there was an error in the committed code. Developer should at that point connect to the server (described in the section 
\b Connecting to Server
\b0 ) and use the following command:\
\
	sudo pm2 list\
\
This will display the currently running node apps. There should be an running by the name of 
\i server
\i0 . If an error has occurred it will show "errored" in the status column. Use the following command to find the error:\
\
	sudo pm2 logs server --lines 100\
\
The lines argument can be decreased, increased, or omitted. \
\

\i 	
\i0\b Updating Node.js Packages\
\
	
\b0 Inside the ~/messengerAPI/package.json file are the server application's dependencies. See this file for formatting. When adding a new dependency (or in the case if a necessary update) call the following command:\
\
		sudo npm install\
\
	
\b Development Machine
\b0 \
\
	To start developing on a local machine, the server.js file from the server repository must be started. Ensure the same packages are installed as matches the server by following the instructions in 
\b Updating Node.js Packages
\b0 . The instructions in 
\b Server Workflow
\b0  can be followed on the development machine but first use the following command to start the MongoDB database:\
\
		mongod\
\
	This will attach itself to a terminal and can be stopped using Ctl+C. After this, start the node server application by changing the terminal's focus directory to the location of the server.js file and then call:\
\
		sudo pm2 start server.js\
\
	The location of server.js is located in the server git repository. To test API calls, instead of using https://hm478project.me/[API CALL]/, you would use http://localhost:8080/[API CALL]/.\
	\
\

\b JWT
\b0 \
\
The secret used in JWT signing is generated when 
\i server.js
\i0  is started and stored in key.json. The JWT header contains the username of its owner. The expiration date for the token is set for 24 hours from creation. A token is given to user on posting to 
\i login
\i0 . Middleware makes this token a reqiurement for all messenger API calls like: download_messages, upload_message. \
\
\

\b Server Details
\b0 \
\
\'95 AWS EC2 Instance\
\'95 Express\
\'95 MongoDB & Mongoose\
\'95 Node.js\
\'95 Ubuntu 14\
\'95 PM2\
\'95 NPM\
\
API directory location in the ubuntu user directory:\
	\
	~/messengerAPI/\
\
\

\b Password Policies (To Implement)
\b0 \
\
\'95 Minimum length 8.\
\'95 At least 1 number.\
\'95 At least 1 capital letter.\
\
To-Do:\
	Hash passwords\
	Remote Login protocol\
	Username Availability\
	Password Policies\
\
Message Protocol (Design):\
\

\b Database Model
\b0 \
\
	
\b User
\b0 \
		
\i name
\i0 : String\
			User-specified. Unique to every user.\
		
\i password
\i0 : String\
			User-specified password concatenated with salt \
			after hashing using HMAC SHA-256.\
			Checked at time of register for password policies.\
		
\i challenge
\i0 : String\
			Generated when user initiates login1 for remote login.\
		
\i salt
\i0 : Number\
			16 byte CSPRNG number generated for each user at\
			time of account registration.\
\

\b Messenger API\

\b0 \
\
	
\b Non-authenticated Calls:
\b0 \
	/login1/\
		POST\
			Keys\
				
\i name\
		Returns
\i0  - Salt and Challenge if user exists.
\i \

\i0 	/login2/\
		POST\
			Keys\
				
\i name\
				tag\
		Returns
\i0  - JWT if correct tag was produced.\
	/register/\
		POST\
			Keys\
				
\i name\
				password
\i0 \
	/users/		\
		GET\
			
\i Returns
\i0  - All users in database.\
				
\i _id: String
\i0 \
				
\i name: String\
				password: String
\i0 \
\
	
\b Authenticated Calls:\

\b0 	- A valid JWT token must be included in the header for key '
\i x-access-token
\i0 ' i order to access the following API calls.\
	/messages/\
		POST\
			Keys\
				
\i content\
				upload_date
\i0 \
		GET\
			
\i Returns
\i0  - All messages uploaded as JSON with the following\
			structure:\
				
\i _id: String
\i0 \
				
\i sender: String\
				content: String\
				upload_date: Date
\i0 \
\
\

\b Git Tips
\b0 \
\
To setup an ssh-connected server repository, you first want to create your git repository. Follow these steps: \
	1. SSH to your server. For this tutorial, it is required that the SSH protocol logins 	solely by key validation and not password. See 
\b Setup Server SSH
\b0  if more 	information is needed.\
	2. Create or change to directory where repository files will be dumped.\
		> mkdir /myServerProject/\
		> cd /myServerProject/\
	3. Assuming git is installed, use the following command:\
		> git init --bare\
		* A bare git repository doesn't collapse all git files into a hidden directory 		named '.git, instead it dumps all git helper files the repo directory.\
	4. Now on the machine that will make commits and be pushing to this server,\
	in a terminal, change directory to your local machine repository.\
		> cd /repositories/myServerProject/\
	5. Call the following command to make a new remote:\
		> git remote add myProductionRemote user@0.0.0.0:/myServerProject/\
	6. For this tutorial, the goal is to have the remote server have its filed updated\
	whenever the GitHub origin remote is committed to. Navigate to this directory:\
\
		/repositories/myServerProject/.git/hooks/\
\
	Create a file named 'post-commit', or if it exists, open it with a text editor. If you\
	had to create this file, it is necessary to give it executable permissions. Edit this\
	file and at the end of its contents add a new line:\
		\
		git push myProductionRemote master\
\
\
\

\b Setup Server SSH
\b0 \
\
}