{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf100
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red170\green13\blue145;
}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c0;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c66500\c5200\c56900;
}
\margl1440\margr1440\vieww14400\viewh16580\viewkind1
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc\partightenfactor0

\f0\b\fs28 \cf0 \ul \ulc0 \
Contents of this File\
\
\ulnone \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 \
\'95 Connecting to Server\
\
\'95 Server Workflow\
	\'95 Updating Node.js Packages\
	\'95 Development Machines\
\
\'95 JWT\
\
\'95 Server Details\
\
\'95 Password Policies\
\
\'95 Database Model\
\
\'95 Messenger API\
\
\'95 Git Tips\
\
\'95 Swift Development Tips\
\
\'95 TLS/SSL
\b0 \

\b \
\'95 Websockets\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\

\fs32 Connecting to Server
\b0\fs24 \
\
The server (AWS EC2 instance) has the key pairs of both development machines. Connecting to the server requires the usage of the following command in a terminal:\
\
	ssh ubuntu@ec2-13-58-143-176.us-east-2.compute.amazonaws.com\
\
This is the default SSH connection method as specified by AWS.
\b \
\

\fs32 Server Workflow
\b0\fs24 \
\
Changes to the server are committed to the 
\i origin
\i0  remote branch located on GitHub.com. When the commit is to the master branch from either development computers, git hooks simultaneously push to the 
\i production
\i0  remote located on the AWS server using:\
\
	git push production master\
\
A tutorial of this setup is explained in the section 
\b Git Tips
\b0 . The EC2 instance has the key pairs of both development machines. Once the server receives the commit, node.js restarts the server process running from the server.js file using the following command:\
\
	sudo pm2 restart server\
\
This functionality can also be created by starting server.js using the 
\i nodemon
\i0  utility. At this point, if any 502 responses come back from the server, there was an error in the committed code. Developer should at that point connect to the server (described in the section 
\b Connecting to Server
\b0 ) and use the following command:\
\
	sudo pm2 list\
\
This will display the currently running node apps. There should be an running by the name of 
\i server
\i0 . If an error has occurred it will show "errored" in the status column. Use the following command to find the error:\
\
	sudo pm2 logs server --lines 100\
\
The lines argument can be decreased, increased, or omitted. \
\

\i 	
\i0\b\fs32 Updating Node.js Packages
\fs24 \
\
	
\b0 Inside the ~/messengerAPI/package.json file are the server application's 	 	dependencies. See this file for formatting. When adding a new dependency (or in 	the case if a necessary update) call the following command:\
\
		sudo npm install\
\
	
\b\fs32 Development Machines
\b0\fs24 \
\
	To start developing on a local machine, the server.js file from the server 		repository must be started. Ensure the same packages are installed as matches 	the server by following the instructions in 
\b Updating Node.js Packages
\b0 . The 	instructions in 
\b Server Workflow
\b0  can be followed on the development machine 	but first use the following command to start the MongoDB database:\
\
		mongod\
\
	This will attach itself to a terminal and can be stopped using Ctl+C. After this, 	start the node server application by changing the terminal's focus directory to the 	location of the server.js file and then call:\
\
		sudo pm2 start server.js\
\
	The location of server.js is located in the server git repository. To test API calls, 	instead of using https://hm478project.me/[API CALL]/, you would use http://	localhost:8080/[API CALL]/.\
	\
\

\b\fs32 JWT
\b0\fs24 \
\
The secret used in JWT signing is generated when 
\i server.js
\i0  is started and stored in key.json. The JWT header contains the username of its owner. The expiration date for the token is set for 24 hours from creation. A token is given to user on posting to 
\i login
\i0 . Middleware makes this token a reqiurement for all messenger API calls like: download_messages, upload_message. \
\
\

\b\fs32 Server Details
\b0\fs24 \
\
\'95 AWS EC2 Instance\
\'95 Express\
\'95 MongoDB & Mongoose\
\'95 Node.js\
\'95 Ubuntu 14\
\'95 PM2\
\'95 NPM\
\'95 Socket.io\
\'95 socketio-jwt\
\
API directory location in the ubuntu user directory:\
	\
	~/messengerAPI/\
\
\

\b\fs32 Password Policies 
\b0\fs24 \
\
\'95 Minimum length is 8.\
\'95 
\i (To Implement) 
\i0 At least 1 number.\
\'95 
\i (To Implement) 
\i0 At least 1 capital letter.\
\

\b\fs32 Database Model
\b0\fs24 \
\
	
\b User
\b0 \
		
\i name
\i0 : String\
			User-specified. Unique to every user.\
		
\i password
\i0 : String\
			User-specified password concatenated with salt \
			after hashing using HMAC SHA-256.\
			Checked at time of register for password policies.\
		
\i challenge
\i0 : String\
			Generated when user initiates login1 for remote login.\
		
\i salt
\i0 : Number\
			16 byte CSPRNG number generated for each user at\
			time of account registration.\
\

\b\fs32 Messenger API
\fs24 \

\b0 \
\
	
\b Non-authenticated Calls:
\b0 \
	/login1/\
		POST\
			Keys\
				
\i name\
		Returns
\i0  - Salt and Challenge if user exists.
\i \

\i0 	/login2/\
		POST\
			Keys\
				
\i name\
				tag\
		Returns
\i0  - JWT if correct tag was produced.\
	/register/\
		POST\
			Keys\
				
\i name\
				password
\i0 \
	/users/		\
		GET\
			
\i Returns
\i0  - All users in database.\
				
\i _id: String
\i0 \
				
\i name: String\
				password: String
\i0 \
\
	
\b Authenticated Calls:\

\b0 	- A valid JWT token must be included in the header for key '
\i x-access-token
\i0 ' i 	order to access the following API calls.\
	/messages/\
		POST\
			Keys\
				
\i content\
				upload_date
\i0 \
		GET\
			
\i Returns
\i0  - All messages uploaded as JSON with the following\
			structure:\
				
\i _id: String
\i0 \
				
\i sender: String\
				content: String\
				upload_date: Date
\i0 \
\
\

\b\fs32 Git Tips
\b0\fs24 \
\
To setup an ssh-connected server repository, you first want to create your git repository. Follow these steps: \
	1. SSH to your server. For this tutorial, it is required that the SSH protocol logins 	solely by key validation and not password. See 
\b Setup Server SSH
\b0  if more 	information is needed.\
	2. Create or change to directory where repository files will be dumped.\
		> mkdir /myServerProject/\
		> cd /myServerProject/\
	3. Assuming git is installed, use the following command:\
		> git init --bare\
		* A bare git repository doesn't collapse all git files into a hidden directory 		named '.git, instead it dumps all git helper files the repo directory.\
	4. Now on the machine that will make commits and be pushing to this server,\
	in a terminal, change directory to your local machine repository.\
		> cd /repositories/myServerProject/\
	5. Call the following command to make a new remote:\
		> git remote add myProductionRemote user@0.0.0.0:/myServerProject/\
	6. For this tutorial, the goal is to have the remote server have its filed updated\
	whenever the GitHub origin remote is committed to. Navigate to this directory:\
\
		/repositories/myServerProject/.git/hooks/\
\
	Create a file named 'post-commit', or if it exists, open it with a text editor. If you\
	had to create this file, it is necessary to give it executable permissions. Edit this\
	file and at the end of its contents add a new line:\
		\
		git push myProductionRemote master\
\
\
\

\b Setup Server SSH
\b0 \
\
\
\
\

\b\fs32 Swift Development Tip
\b0\fs24 \
\
\'95 External libraries for our MacOSX Swift client were installed and integrated using the pods system. This requires a file named '
\i Podfile
\i0 ' to be created in the directory of your applications main repository. Once you've created (or whenever updating) your podfile, call the command in a terminal on the directory of your 
\i Podfile
\i0 :\
\
	pod install\
\
Note: It may be necessary to append ' --repo-update' to the end of the previous terminal command if any pods are out of date. \
If you are using an Xcode project with libraries installed by the pod system, you can no longer use the .
\i xcodeproj
\i0  file to open your project in Xcode. The file to be used is in the same directory as the 
\i Podfile
\i0  and has the .
\i xcworkspace
\i0  extension.\
When opening the .
\i xcworkspace
\i0  file, you should see your project and another project named 'Pods' open in same development window. If you expand the Pods project and look in the Pods directory, there should be a list of \
\
\'95 Disable secure connection checks for URL sessions by adding to a project's Info.plist when developing locally. Note: Open the Info.plist file as source code instead of pro\
\
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f1 \cf2 \cb3     	\cf4 <key>\cf2 NSAppTransportSecurity\cf4 </key>
\f0 \cf0 \

\f1 \cf2     	\cf4 <dict>
\f0 \cf0 \

\f1 \cf2         	\cf4 <key>\cf2 NSAllowsArbitraryLoads\cf4 </key>
\f0 \cf0 \

\f1 \cf2         	\cf4 <true/>
\f0 \cf0 \

\f1 \cf2         	\cf4 <key>\cf2 NSExceptionDomains\cf4 </key>
\f0 \cf0 \

\f1 \cf2         	\cf4 <dict>
\f0 \cf0 \

\f1 \cf2             	\cf4 <key>\cf2 example.com\cf4 </key>
\f0 \cf0 \

\f1 \cf2             	\cf4 <dict>
\f0 \cf0 \

\f1 \cf2                 	\cf4 <key>\cf2 NSExceptionAllowsInsecureHTTPLoads\cf4 </key>
\f0 \cf0 \

\f1 \cf2                 	\cf4 <true/>
\f0 \cf0 \

\f1 \cf2                 	\cf4 <key>\cf2 NSIncludesSubdomains\cf4 </key>
\f0 \cf0 \

\f1 \cf2                 	\cf4 <true/>
\f0 \cf0 \

\f1 \cf2             	\cf4 </dict>
\f0 \cf0 \

\f1 \cf2        	\cf4 </dict>
\f0 \cf0 \

\f1 \cf2     	\cf4 </dict>\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs32 \cf0 \cb1 TLS/SSL
\b0\fs24 \
\
The server uses LetsEncrypt to provide validate SSL certificates. Since our server has Nginx serving as a reverse proxy for our NodeJs server application, it's Nginx that handles SSL and not NodeJs. Nginx interacts with LetsEncrypt's certs to ensure up to TLS1.2 protocol for a secure HTTPS connection. It also handles redirects from HTTP to HTTPS to force all calls to go through TLS. This seems to have negligible overhead for our small-scale system. We decided to handle SSL through Nginx and not NodeJs for better organization and less code in our Node app.\
\

\b\fs32 Websockets
\b0\fs24 \
\
Our MacOSX Swift client uses the library 
\i Starscream
\i0  for socket connections and our NodeJs server uses its own Net library for socket connections.\
\
The socket stream itself must be validated independently of the web application. So we are using 
\i socketio-jwt
\i0  to do that. See this for reference:\
\
	https://auth0.com/blog/auth-with-socket-io/\
\
}